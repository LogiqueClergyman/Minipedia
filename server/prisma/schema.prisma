// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  level            Int               @default(0)
  email            String            @unique
  password         String
  Name             String?           @default("")
  UserName         String            @unique @default("")
  Gender           String            @default("")
  displayImg       String?
  about            String?
  Posts            Post[]            @relation("Post")
  PostLikes        PostLike[]
  GroupMemberships GroupMembership[]
  salt             String
}

model Group {
  id               Int               @id @default(autoincrement())
  name             String
  desc             String?
  displayImg       String?
  GroupMemberships GroupMembership[]
  GroupPost        GroupPost[]
}

model GroupMembership {
  groupId  Int
  userId   Int
  role     String?
  joinedAt DateTime @default(now())

  Group Group @relation(fields: [groupId], references: [id])
  User  User  @relation(fields: [userId], references: [id])

  @@id([groupId, userId])
}

model GroupPost {
  groupId Int
  postId  Int

  Group Group @relation(fields: [groupId], references: [id])
  Post  Post  @relation(fields: [postId], references: [id])

  @@id([groupId, postId])
}

model Post {
  id          Int           @id @default(autoincrement())
  postedBy    Int
  title       String?
  body        String?
  tags        String[]      @default([])
  verified    Int?          @default(0)
  User        User          @relation("Post", fields: [postedBy], references: [id])
  GroupPost   GroupPost[]
  PostComment PostComment[]
  EditHistory String[]      @default([])
  PostLike    PostLike[]
}

model PostLike {
  postId Int
  userId Int

  Post Post @relation(fields: [postId], references: [id])
  User User @relation(fields: [userId], references: [id])

  @@id([postId, userId])
}

model PostComment {
  postId    Int
  commentId String

  Post Post @relation(fields: [postId], references: [id])

  @@id([postId, commentId])
}
